#!/usr/bin/env bash

_VERSION="1.0.0"
HOSTS_PATH="${HOSTS_PATH:-/etc/hosts}"
_COMMAND_ARGV=("${@:2}")
_CMD="${1:-help}"
_ME=$(basename "${0}")

function _die() {
    echo "$1" 1>&2
    exit 1
}

function _main() {
    _run_command "${1}" "${@:2}"
}

function _search_in_file() {
    local arguments=("$@")

    if [ ${#arguments[@]} -ne 2 ]; then
        _die "_search_in_file requires 2 parameters"
    fi

    local pattern=${arguments[0]}
    local file=${arguments[1]}

    sed -n -e "s/\\($pattern\\)/\\1/p" "$file"
}

function _replace_in_file() {
    local arguments=("$@")

    if [ ${#arguments[@]} -ne 3 ]; then
        _die "_search_in_file requires 3 paramesters"
    fi

    local pattern=${arguments[0]}
    local replacement_pattern=${arguments[1]}
    local file=${arguments[2]}

    sed -i -e "s/$pattern/${replacement_pattern}/" "$file"
}

function _contains() {
    local _test_list=(${*:2})

    for __test_element in "${_test_list[@]:-}"; do
        if [[ "${__test_element}" == "${1}" ]]; then
            return 0
        fi
    done

    return 1
}

function _verify_write_permissions() {
    if ! test -w "${HOSTS_PATH}"; then
        sudo "${_ME}" "${_CMD}" "${_COMMAND_ARGV[@]:-}"
        exit $?
    fi
}

function _is_valid_ip() {
    if [[ "$1" =~ ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ]]; then
        return 0
    elif [[ "$1" =~ ^((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?$ ]]; then
        return 0
    fi

    return 1
}

function _is_valid_domain() {
    if [[ "$1" == *[[:space:]]* ]]; then
        return 1
    fi

    return 0
}

function _is_valid_group() {
    if [[ "$1" == *[[:space:]]* ]]; then
        return 1
    fi

    return 0
}

function _get_group() {
    local group_name="${1:-}"

    if [[ -z "${group_name}" ]]; then
        _die "Group name parameter is required"
    elif ! _is_valid_group "${group_name}"; then
        _die "Group name parameter is not valid"
    fi

    local group_string

    mapfile -t group_string < <(sed -n "s/\\#group:${group_name}[[:space:]]\+\\(.*\\)$/\\1/p" "${HOSTS_PATH}")

    if [[ ${#group_string[@]} -gt 1 ]]; then
        _die "Group is duplicated in file ${HOSTS_PATH}"
    elif [[ ${#group_string[@]} -eq 0 ]]; then
        echo ""
    else
        echo "${group_string[0]}"
    fi
}

function _set_group() {
    local group_name="${1:-}"

    if [[ -z "${group_name}" ]]; then
        _die "Group name parameter is required"
    elif ! _is_valid_group "${group_name}"; then
        _die "Group name parameter is not valid"
    fi

    local existing_group
    local group="#group:${group_name}"

    for domain in "${@:2}"; do
        group="${group} ${domain}"
    done

    mapfile -t existing_group < <(sed -n "s/\\#group:${group_name}[[:space:]]\+\\(.*\\)$/\\1/p" "${HOSTS_PATH}")

    if [[ ${#existing_group[@]} -gt 1 ]]; then
        _die "Group is duplicated in file ${HOSTS_PATH}"
    elif [[ ${#existing_group[@]} -eq 0 ]]; then
        sed -i "1 s/^/${group}\n/" "${HOSTS_PATH}"
    else
        _replace_in_file "^#group:${group_name}[[:space:]]\+.*$" "${group}" "${HOSTS_PATH}"
    fi
}

function _delete_from_file() {
    local pattern="${1:-}"
    local file="${2:-}"

    if [[ -z "${pattern}" ]]; then
        _die "Pattern is required"
    elif ! test -w "${file}"; then
        _die "${file} is not writeable"
    fi

    sed -i -e "/${pattern}/d" "${file}"
}

function _file_contains() {
    local pattern="${1:-}"
    local file="${2:-}"

    if [[ -z "${pattern}" ]]; then
        _die "Pattern is required"
    elif ! test -r "${file}"; then
        _die "${file} is not readable"
    fi

    if ! grep -e "${pattern}" "${file}"; then
        return 1
    else
        return 0
    fi
}

function _is_host_set() {
    local hostname="${1:-}"

    if ! _file_contains "^[^[:space:]#]\+[[:space:]]\+${hostname}\([[:space:]]\+\|$\)" "${HOSTS_PATH}"; then
        return 1
    else
        return 0
    fi
}

function _delete_host_entry() {
    local hostname="${1:-}"

    _delete_from_file "^[^[:space:]#]\+[[:space:]]\+${hostname}\([[:space:]]\+\|$\)" "${HOSTS_PATH}"
}

function _set_host_entry() {
    local _ip="${1:-}"
    local _hostname="${2:-}"

    if [[ -z "${_ip:-}" ]]; then
        _die "IP parameter is missing."
    elif [[ -z "${_hostname:-}" ]]; then
        _die "Hostname parameter is missing."
    elif ! _is_valid_ip "${_ip}"; then
        _die "${_ip} is not a valid ip address."
    elif ! _is_valid_domain "${_hostname}"; then
        _die "${_hostname} is not a valid hostname."
    elif grep -q -e "^[^[:space:]#]\+[[:space:]]\+${_hostname}\([[:space:]]\+.*\)\?$" "${HOSTS_PATH}"; then
        _replace_in_file "^[^[:space:]#]\+[[:space:]]\+${_hostname}\([[:space:]]\+.*\)\?$" "${_ip}\t${_hostname}" "${HOSTS_PATH}"
    else
        printf "%s\t%s\n" "${_ip}" "${_hostname}" >>"${HOSTS_PATH}"
    fi
}

function _get_host_entry() {
    local hostname="${1:-}"

    if [[ -z "${hostname:-}" ]]; then
        _die "Hostname parameter is missing."
    elif ! _is_valid_domain "${hostname}"; then
        _die "${hostname} is not a valid hostname."
    fi

    sed -n -e "s/^\([^[:space:]#]\+\)[[:space:]]\+${hostname}\([[:space:]]\+\|$\)/\\1/p" "${HOSTS_PATH}"
}

declare -A _doc
declare -A _commands

function _register_command() {
    local command_name="${1:-}"
    local command_function="${2:-}"
    local command_doc="${3:-}"

    _doc["${command_name}"]="${command_doc}"
    _commands["${command_name}"]="${command_function}"
}

function _run_command() {
    local command_name="${1:-}"

    "${_commands["${command_name}"]:-cmd_help}" "${@:2}"
}

function _show_help() {
    local command_name="${1:-}"

    echo _doc["${command_name}"]
}

_register_command "version" "cmd_version" "
Usage:
  ${_ME} (version | --version)

Description:
  Display the current program version.

  To save you the trouble, the current version is ${_VERSION}"

function cmd_version() {
    printf "%s\\n" "${_VERSION}"
}

_register_command "help" "cmd_help" "
Usage:
  ${_ME} set <hostname> <ip address>
  ${_ME} rm <hostname>
  ${_ME} group <group> set <hostname 1> <hostname 2> ... <hostname n>
  ${_ME} group <group> + <hostname 1> <hostname 2> ... <hostname n>
  ${_ME} group <group> - <hostname 1> <hostname 2> ... <hostname n>
  ${_ME} group <group> rm
  ${_ME} group <group> <ip address>
  ${_ME} group <group> reset
  ${_ME} group <group>
  ${_ME} version

Help:
  ${_ME} help [<command>]
"

function cmd_help() {
    if [[ -n "${1:-}" ]]; then
        echo "${_doc["${1}"]}"
    else
        echo "${_doc["help"]}"
    fi
}

_register_command "get" "cmd_get" "
Usage:
  ${_ME} get <hostname>

Description:
  Get the ip address associated with a hostname
"

function cmd_get() {
    local _hostname="${1:-}"

    _get_host_entry "${_hostname}"
}

_register_command "set" "cmd_set" "
Usage:
  ${_ME} set <hostname> <ip address>

Description:
  Set an hostfile entry
"

function cmd_set() {
    _verify_write_permissions "$@"

    local _hostname="${1:-}"
    local _ip="${2:-}"

    _set_host_entry "${_ip}" "${_hostname}"

    printf "Set entry %s to %s\n" "${_hostname}" "${_ip}"
}

_register_command "rm" "cmd_rm" "
Usage:
  ${_ME} rm <hostname>

Description:
  Remove an entry
"

function cmd_rm() {
    _verify_write_permissions "$@"

    local _hostname="${1:-}"

    if [[ -z "${_hostname:-}" ]]; then
        _die "Hostname parameter is missing."
    elif ! _is_valid_domain "${_hostname}"; then
        _die "${_hostname} is not a valid hostname."
    elif ! _is_host_set "${_hostname}"; then
        _die "Hostname not found."
    fi

    _delete_host_entry "${_hostname}"
    printf "Removed entry %s\n" "${_hostname}"
}

_register_command "group" "cmd_group" "
Usage:
  ${_ME} group <group> set <hostname 1> <hostname 2> ... <hostname n>
  ${_ME} group <group> + <hostname 1> <hostname 2> ... <hostname n>
  ${_ME} group <group> - <hostname 1> <hostname 2> ... <hostname n>
  ${_ME} group <group> rm
  ${_ME} group <group> <ip address>
  ${_ME} group <group> reset
  ${_ME} group <group>

Description:
  no parameter: show the content of a group
  set: create a new group or change an existing one
  +: add entries to an existing group
  -: remove entries from an existing group
  rm: delete an group
  <ip address>: set all the entries of an existing group to the ip address
  reset: remove all entries matching the group content
"

function cmd_group() {
    local group_name="${1:-}"
    local action="${2:-}"

    if [[ -z "${group_name}" ]]; then
        _die "Group name is required."
    elif ! _is_valid_group "${group_name}"; then
        _die "${group_name} is not a valid group name."
    elif [[ -z "${action}" ]]; then
        _group_get "${group_name}"
        return 0
    fi

    _verify_write_permissions "$@"

    case "$2" in
    +)
        _group_add "${group_name}" "${@:3}"
        ;;
    -)
        _group_rm "${group_name}" "${@:3}"
        ;;
    set)
        _group_set "${group_name}" "${@:3}"
        ;;
    rm)
        _group_del "${group_name}"
        ;;
    reset)
        _group_reset "${group_name}"
        ;;
    *)
        _group_set_ip "${group_name}" "${action}"
        ;;
    esac
}

function _group_get() {
    local group_name="${1:-}"
    local group

    IFS=" "
    read -r -a group <<<"$(_get_group "${group_name}")"

    if [[ ${#group[@]} -eq 0 ]]; then
        _die "${group_name} doesn't exists or is empty"
    fi

    for domain in "${group[@]}"; do
        local address
        address=$(_get_host_entry "${domain}")
        if [[ -z "${address:-}" ]]; then
            printf "%s\n" "${domain}"
        else
            printf "%s\t%s\n" "${domain}" "${address}"
        fi
    done
}

function _group_add() {
    local group_name="${1:-}"
    local group

    IFS=" "
    read -r -a group <<<"$(_get_group "${group_name}")"

    for domain in "${@:2}"; do
        if ! _contains "${domain}" "${group[*]}"; then
            group+=("${domain}")
        fi
    done

    _set_group "${group_name}" "${group[*]}"

    printf "Group %s modified.\n" "${group_name}"
}

function _group_rm() {
    local group_name="${1:-}"
    local group
    local new_group

    IFS=" "
    read -r -a group <<<"$(_get_group "${group_name}")"

    for domain in "${group[@]}"; do
        if ! _contains "${domain}" "${@:2}"; then
            new_group+=("${domain}")
        fi
    done

    _set_group "${group_name}" "${new_group[*]}"

    printf "Group %s modified.\n" "${group_name}"
}

function _group_set() {
    local group_name="${1:-}"
    _set_group "${group_name}" "${@:2}"

    printf "Group %s created.\n" "${group_name}"
}

function _group_del() {
    _verify_write_permissions "$@"

    local group_name="${1:-}"

    if [[ -z "${group_name}" ]]; then
        _die "Group name is required."
    elif ! _is_valid_group "${group_name}"; then
        _die "Group name parameter is not valid."
    fi

    local current_group
    IFS=" "
    read -r -a current_group <<<"$(_get_group "${group_name}")"

    if [[ ${#current_group[@]} -eq 0 ]]; then
        _die "Group ${group_name} not found."
    fi

    for domain in "${current_group[@]}"; do
        _delete_host_entry "${domain}"
    done

    _delete_from_file "^#group:${group_name}[[:space:]]\+.*$" "${HOSTS_PATH}"

    printf "Group %s deleted.\n" "${group_name}"
}

function _group_set_ip() {
    _verify_write_permissions "$@"

    local group_name="${1:-}"
    local ip="${2:-}"

    if [[ -z "${group_name}" ]]; then
        _die "Group name is required."
    elif ! _is_valid_group "${group_name}"; then
        _die "Group name parameter is not valid."
    elif [[ -z "${ip}" ]]; then
        _die "IP parameter is required."
    elif ! _is_valid_ip "${ip}"; then
        _die "${ip} is not a valid IP address."
    fi

    local current_group
    IFS=" "
    read -r -a current_group <<<"$(_get_group "${group_name}")"

    if [[ ${#current_group[@]} -eq 0 ]]; then
        _die "Group ${group_name} not found."
    fi

    for domain in "${current_group[@]}"; do
        _set_host_entry "${ip}" "${domain}"

        printf "%s set to %s\n" "${domain}" "${ip}"
    done
}

function _group_reset() {
    _verify_write_permissions "$@"

    local group_name="${1:-}"

    if [[ -z "${group_name}" ]]; then
        _die "Group name is required."
    elif ! _is_valid_group "${group_name}"; then
        _die "Group name parameter is not valid."
    fi

    local current_group
    IFS=" "
    read -r -a current_group <<<"$(_get_group "${group_name}")"

    if [[ ${#current_group[@]} -eq 0 ]]; then
        _die "Group ${group_name} not found."
    fi

    for domain in "${current_group[@]}"; do
        _delete_host_entry "${domain}"

        printf "Entry %s removed\n" "${domain}"
    done
}

# Run Program
_main "${_CMD}" "${_COMMAND_ARGV[@]}"